#include "cookie.hpp"

#include <sstream>

namespace attender
{
//#####################################################################################################################
    cookie::cookie()
        : name_{}
        , value_{}
        , domain_{}
        , path_{}
        , expires_{}
        , secure_{}
        , http_only_{}
        , max_age_{0}
    {

    }
//---------------------------------------------------------------------------------------------------------------------
    cookie& cookie::set_name(std::string const& name)
    {
        name_ = name;
        return *this;
    }
//---------------------------------------------------------------------------------------------------------------------
    cookie& cookie::set_value(std::string const& value)
    {
        value_ = value;
        return *this;
    }
//---------------------------------------------------------------------------------------------------------------------
    cookie& cookie::set_expiry(date const& expires)
    {
        expires_ = expires;
        return *this;
    }
//---------------------------------------------------------------------------------------------------------------------
    cookie& cookie::make_session_cookie()
    {
        expires_ = boost::none;
        return *this;
    }
//---------------------------------------------------------------------------------------------------------------------
    cookie& cookie::set_secure(bool secure)
    {
        secure_ = secure;
        return *this;
    }
//---------------------------------------------------------------------------------------------------------------------
    cookie& cookie::set_http_only(bool http_only)
    {
        http_only_ = http_only;
        return *this;
    }
//---------------------------------------------------------------------------------------------------------------------
    cookie& cookie::set_domain(std::string const& domain)
    {
        domain_ = domain;
        return *this;
    }
//---------------------------------------------------------------------------------------------------------------------
    cookie& cookie::set_path(std::string const& path)
    {
        path_ = path;
        return *this;
    }
//---------------------------------------------------------------------------------------------------------------------
    cookie& cookie::set_max_age(uint64_t age)
    {
        max_age_ = max_age;
        return *this;
    }
//---------------------------------------------------------------------------------------------------------------------
    std::string cookie::get_name() const
    {
        return name_;
    }
//---------------------------------------------------------------------------------------------------------------------
    std::string cookie::get_value() const
    {
        return value_;
    }
//---------------------------------------------------------------------------------------------------------------------
    bool cookie::is_secure() const
    {
        return secure_;
    }
//---------------------------------------------------------------------------------------------------------------------
    bool cookie::is_http_only() const
    {
        return http_only_;
    }
//---------------------------------------------------------------------------------------------------------------------
    std::string cookie::get_path() const
    {
        return path_;
    }
//---------------------------------------------------------------------------------------------------------------------
    std::string cookie::get_domain() const
    {
        return domain_;
    }
//---------------------------------------------------------------------------------------------------------------------
    uint64_t cookie::get_max_age() const
    {
        return max_age_;
    }
//---------------------------------------------------------------------------------------------------------------------
    std::string cookie::to_set_cookie_string() const
    {
        std::stringstream sstr;
        sstr << name_ << "=" << value_;

        if (!domain_.empty())
            sstr << "; Domain=" << domain_;
        if (!path_.empty())
            sstr << "; Path=" << path_;
        if (max_age_ > 0)
            sstr << "; Max-Age=" << max_age_;
        if (expires_)
            sstr << "; Expires=" << expires_.get().to_gmt_string();
        if (secure_)
            sstr << "; Secure";
        if (http_only_)
            sstr << "; HttpOnly";

        return sstr.str();
    }
//#####################################################################################################################
}
